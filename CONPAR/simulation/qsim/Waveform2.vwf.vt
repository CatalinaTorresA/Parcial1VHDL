// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/18/2023 19:01:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CONPAR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CONPAR_vlg_sample_tst(
	clock,
	EN,
	reset,
	start,
	sampler_tx
);
input  clock;
input  EN;
input  reset;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clock or EN or reset or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CONPAR_vlg_check_tst (
	count,
	d1,
	DEC,
	L,
	sampler_rx
);
input [5:0] count;
input [6:0] d1;
input [6:0] DEC;
input  L;
input sampler_rx;

reg [5:0] count_expected;
reg [6:0] d1_expected;
reg [6:0] DEC_expected;
reg  L_expected;

reg [5:0] count_prev;
reg [6:0] d1_prev;
reg [6:0] DEC_prev;
reg  L_prev;

reg [5:0] count_expected_prev;
reg [6:0] d1_expected_prev;
reg [6:0] DEC_expected_prev;
reg  L_expected_prev;

reg [5:0] last_count_exp;
reg [6:0] last_d1_exp;
reg [6:0] last_DEC_exp;
reg  last_L_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	count_prev = count;
	d1_prev = d1;
	DEC_prev = DEC;
	L_prev = L;
end

// update expected /o prevs

always @(trigger)
begin
	count_expected_prev = count_expected;
	d1_expected_prev = d1_expected;
	DEC_expected_prev = DEC_expected;
	L_expected_prev = L_expected;
end


// expected count[ 5 ]
initial
begin
	count_expected[5] = 1'bX;
end 
// expected count[ 4 ]
initial
begin
	count_expected[4] = 1'bX;
end 
// expected count[ 3 ]
initial
begin
	count_expected[3] = 1'bX;
end 
// expected count[ 2 ]
initial
begin
	count_expected[2] = 1'bX;
end 
// expected count[ 1 ]
initial
begin
	count_expected[1] = 1'bX;
end 
// expected count[ 0 ]
initial
begin
	count_expected[0] = 1'bX;
end 
// expected d1[ 6 ]
initial
begin
	d1_expected[6] = 1'bX;
end 
// expected d1[ 5 ]
initial
begin
	d1_expected[5] = 1'bX;
end 
// expected d1[ 4 ]
initial
begin
	d1_expected[4] = 1'bX;
end 
// expected d1[ 3 ]
initial
begin
	d1_expected[3] = 1'bX;
end 
// expected d1[ 2 ]
initial
begin
	d1_expected[2] = 1'bX;
end 
// expected d1[ 1 ]
initial
begin
	d1_expected[1] = 1'bX;
end 
// expected d1[ 0 ]
initial
begin
	d1_expected[0] = 1'bX;
end 
// expected DEC[ 6 ]
initial
begin
	DEC_expected[6] = 1'bX;
end 
// expected DEC[ 5 ]
initial
begin
	DEC_expected[5] = 1'bX;
end 
// expected DEC[ 4 ]
initial
begin
	DEC_expected[4] = 1'bX;
end 
// expected DEC[ 3 ]
initial
begin
	DEC_expected[3] = 1'bX;
end 
// expected DEC[ 2 ]
initial
begin
	DEC_expected[2] = 1'bX;
end 
// expected DEC[ 1 ]
initial
begin
	DEC_expected[1] = 1'bX;
end 
// expected DEC[ 0 ]
initial
begin
	DEC_expected[0] = 1'bX;
end 

// expected L
initial
begin
	L_expected = 1'bX;
end 
// generate trigger
always @(count_expected or count or d1_expected or d1 or DEC_expected or DEC or L_expected or L)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected count = %b | expected d1 = %b | expected DEC = %b | expected L = %b | ",count_expected_prev,d1_expected_prev,DEC_expected_prev,L_expected_prev);
	$display("| real count = %b | real d1 = %b | real DEC = %b | real L = %b | ",count_prev,d1_prev,DEC_prev,L_prev);
`endif
	if (
		( count_expected_prev[0] !== 1'bx ) && ( count_prev[0] !== count_expected_prev[0] )
		&& ((count_expected_prev[0] !== last_count_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[0] = count_expected_prev[0];
	end
	if (
		( count_expected_prev[1] !== 1'bx ) && ( count_prev[1] !== count_expected_prev[1] )
		&& ((count_expected_prev[1] !== last_count_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[1] = count_expected_prev[1];
	end
	if (
		( count_expected_prev[2] !== 1'bx ) && ( count_prev[2] !== count_expected_prev[2] )
		&& ((count_expected_prev[2] !== last_count_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[2] = count_expected_prev[2];
	end
	if (
		( count_expected_prev[3] !== 1'bx ) && ( count_prev[3] !== count_expected_prev[3] )
		&& ((count_expected_prev[3] !== last_count_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[3] = count_expected_prev[3];
	end
	if (
		( count_expected_prev[4] !== 1'bx ) && ( count_prev[4] !== count_expected_prev[4] )
		&& ((count_expected_prev[4] !== last_count_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[4] = count_expected_prev[4];
	end
	if (
		( count_expected_prev[5] !== 1'bx ) && ( count_prev[5] !== count_expected_prev[5] )
		&& ((count_expected_prev[5] !== last_count_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[5] = count_expected_prev[5];
	end
	if (
		( d1_expected_prev[0] !== 1'bx ) && ( d1_prev[0] !== d1_expected_prev[0] )
		&& ((d1_expected_prev[0] !== last_d1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d1_exp[0] = d1_expected_prev[0];
	end
	if (
		( d1_expected_prev[1] !== 1'bx ) && ( d1_prev[1] !== d1_expected_prev[1] )
		&& ((d1_expected_prev[1] !== last_d1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d1_exp[1] = d1_expected_prev[1];
	end
	if (
		( d1_expected_prev[2] !== 1'bx ) && ( d1_prev[2] !== d1_expected_prev[2] )
		&& ((d1_expected_prev[2] !== last_d1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d1_exp[2] = d1_expected_prev[2];
	end
	if (
		( d1_expected_prev[3] !== 1'bx ) && ( d1_prev[3] !== d1_expected_prev[3] )
		&& ((d1_expected_prev[3] !== last_d1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d1_exp[3] = d1_expected_prev[3];
	end
	if (
		( d1_expected_prev[4] !== 1'bx ) && ( d1_prev[4] !== d1_expected_prev[4] )
		&& ((d1_expected_prev[4] !== last_d1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d1_exp[4] = d1_expected_prev[4];
	end
	if (
		( d1_expected_prev[5] !== 1'bx ) && ( d1_prev[5] !== d1_expected_prev[5] )
		&& ((d1_expected_prev[5] !== last_d1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d1_exp[5] = d1_expected_prev[5];
	end
	if (
		( d1_expected_prev[6] !== 1'bx ) && ( d1_prev[6] !== d1_expected_prev[6] )
		&& ((d1_expected_prev[6] !== last_d1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d1_exp[6] = d1_expected_prev[6];
	end
	if (
		( DEC_expected_prev[0] !== 1'bx ) && ( DEC_prev[0] !== DEC_expected_prev[0] )
		&& ((DEC_expected_prev[0] !== last_DEC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEC_expected_prev);
		$display ("     Real value = %b", DEC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DEC_exp[0] = DEC_expected_prev[0];
	end
	if (
		( DEC_expected_prev[1] !== 1'bx ) && ( DEC_prev[1] !== DEC_expected_prev[1] )
		&& ((DEC_expected_prev[1] !== last_DEC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEC_expected_prev);
		$display ("     Real value = %b", DEC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DEC_exp[1] = DEC_expected_prev[1];
	end
	if (
		( DEC_expected_prev[2] !== 1'bx ) && ( DEC_prev[2] !== DEC_expected_prev[2] )
		&& ((DEC_expected_prev[2] !== last_DEC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEC_expected_prev);
		$display ("     Real value = %b", DEC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DEC_exp[2] = DEC_expected_prev[2];
	end
	if (
		( DEC_expected_prev[3] !== 1'bx ) && ( DEC_prev[3] !== DEC_expected_prev[3] )
		&& ((DEC_expected_prev[3] !== last_DEC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEC_expected_prev);
		$display ("     Real value = %b", DEC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DEC_exp[3] = DEC_expected_prev[3];
	end
	if (
		( DEC_expected_prev[4] !== 1'bx ) && ( DEC_prev[4] !== DEC_expected_prev[4] )
		&& ((DEC_expected_prev[4] !== last_DEC_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEC_expected_prev);
		$display ("     Real value = %b", DEC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DEC_exp[4] = DEC_expected_prev[4];
	end
	if (
		( DEC_expected_prev[5] !== 1'bx ) && ( DEC_prev[5] !== DEC_expected_prev[5] )
		&& ((DEC_expected_prev[5] !== last_DEC_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEC_expected_prev);
		$display ("     Real value = %b", DEC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DEC_exp[5] = DEC_expected_prev[5];
	end
	if (
		( DEC_expected_prev[6] !== 1'bx ) && ( DEC_prev[6] !== DEC_expected_prev[6] )
		&& ((DEC_expected_prev[6] !== last_DEC_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEC_expected_prev);
		$display ("     Real value = %b", DEC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DEC_exp[6] = DEC_expected_prev[6];
	end
	if (
		( L_expected_prev !== 1'bx ) && ( L_prev !== L_expected_prev )
		&& ((L_expected_prev !== last_L_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L_exp = L_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CONPAR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg EN;
reg reset;
reg start;
// wires                                               
wire [5:0] count;
wire [6:0] d1;
wire [6:0] DEC;
wire L;

wire sampler;                             

// assign statements (if any)                          
CONPAR i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.count(count),
	.d1(d1),
	.DEC(DEC),
	.EN(EN),
	.L(L),
	.reset(reset),
	.start(start)
);

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// EN
initial
begin
	EN = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// start
initial
begin
	start = 1'b1;
end 

CONPAR_vlg_sample_tst tb_sample (
	.clock(clock),
	.EN(EN),
	.reset(reset),
	.start(start),
	.sampler_tx(sampler)
);

CONPAR_vlg_check_tst tb_out(
	.count(count),
	.d1(d1),
	.DEC(DEC),
	.L(L),
	.sampler_rx(sampler)
);
endmodule

